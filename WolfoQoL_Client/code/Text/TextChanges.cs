using Mono.Cecil.Cil;
using MonoMod.Cil;
using R2API;
using RoR2;
using RoR2.Items;
using RoR2.Skills;
//using System;
using UnityEngine;
using UnityEngine.AddressableAssets;

namespace WolfoQoL_Client.Text
{
    public class PurchaseTokenOverwrite : MonoBehaviour
    {
        //For some ungodly reason
        //These tokens are networked
        //So we can't really set them for Clients who don't have it
        public string displayNameToken;
        public string contextToken;
    }


    public class TextChanges
    {
        public static R2API.LanguageAPI.LanguageOverlay TPLunar1;
        public static R2API.LanguageAPI.LanguageOverlay TPLunar2;
        public static R2API.LanguageAPI.LanguageOverlay TPLunar3;
        public static R2API.LanguageAPI.LanguageOverlay TPLunar4;
        public static bool LunaredAllOverIt = false;
        //public static R2API.LanguageAPI.LanguageOverlay TPLunar3;
        //public static R2API.LanguageAPI.LanguageOverlay TPLunar4;

        public static void Main()
        {
            EndingText();
            if (WConfig.cfgTextOther.Value)
            {
                OtherText();
            }


            LegacyResourcesAPI.Load<GameObject>("Prefabs/CharacterBodies/LunarExploderBody").GetComponent<CharacterBody>().subtitleNameToken = "LUNAREXPLODER_BODY_SUBTITLE";


            On.RoR2.TeleporterInteraction.Start += BlueTeleporterObjective;

            On.RoR2.GenericPickupController.HandlePickupMessage += GenericPickupController_HandlePickupMessage;
            IL.RoR2.GenericPickupController.HandlePickupMessage += IL_PICKUP;

            OptionPickupStuff.Start();

            On.RoR2.PurchaseInteraction.GetDisplayName += PurchaseInteraction_GetDisplayName;
            IL.RoR2.PurchaseInteraction.GetContextString += PurchaseInteraction_GetContextString;


        }


        public static void AutoGeneratedText()
        {
            if (!WConfig.cfgTextOther.Value)
            {
                return;
            }
            #region Boosted Skill Titles
            SkillDef skill = null;
            skill = Addressables.LoadAssetAsync<SkillDef>(key: "RoR2/DLC1/VoidSurvivor/FireCorruptBeam.asset").WaitForCompletion();
            BoostedNameToken(skill, "VOIDFIEND_BOOSTED_FORMAT");
            skill.skillDescriptionToken = "SKILL_VOIDFIEND_CORRUPT_M1";
            skill = Addressables.LoadAssetAsync<SkillDef>(key: "RoR2/DLC1/VoidSurvivor/FireCorruptDisk.asset").WaitForCompletion();
            BoostedNameToken(skill, "VOIDFIEND_BOOSTED_FORMAT");
            skill.skillDescriptionToken = "SKILL_VOIDFIEND_CORRUPT_M2";
            skill = Addressables.LoadAssetAsync<SkillDef>(key: "RoR2/DLC1/VoidSurvivor/VoidBlinkDown.asset").WaitForCompletion();
            BoostedNameToken(skill, "VOIDFIEND_BOOSTED_FORMAT");
            skill.skillDescriptionToken = "SKILL_VOIDFIEND_CORRUPT_M3";
            skill = Addressables.LoadAssetAsync<SkillDef>(key: "RoR2/DLC1/VoidSurvivor/CrushHealth.asset").WaitForCompletion();
            BoostedNameToken(skill, "VOIDFIEND_BOOSTED_FORMAT");
            skill.skillDescriptionToken = "SKILL_VOIDFIEND_CORRUPT_M4";


            skill = Addressables.LoadAssetAsync<SkillDef>(key: "RoR2/DLC2/Chef/ChefDiceBoosted.asset").WaitForCompletion();
            BoostedNameToken(skill, "CHEF_BOOSTED_FORMAT");
            skill = Addressables.LoadAssetAsync<SkillDef>(key: "RoR2/DLC2/Chef/ChefSearBoosted.asset").WaitForCompletion();
            BoostedNameToken(skill, "CHEF_BOOSTED_FORMAT");
            skill = Addressables.LoadAssetAsync<SkillDef>(key: "RoR2/DLC2/Chef/ChefIceBoxBoosted.asset").WaitForCompletion();
            BoostedNameToken(skill, "CHEF_BOOSTED_FORMAT");
            skill = Addressables.LoadAssetAsync<SkillDef>(key: "RoR2/DLC2/Chef/ChefRolyPolyBoosted.asset").WaitForCompletion();
            BoostedNameToken(skill, "CHEF_BOOSTED_FORMAT");
            skill = Addressables.LoadAssetAsync<SkillDef>(key: "RoR2/DLC2/Chef/ChefOilSpillBoosted.asset").WaitForCompletion();
            BoostedNameToken(skill, "CHEF_BOOSTED_FORMAT");
            #endregion


            skill = Addressables.LoadAssetAsync<SkillDef>(key: "dacc509e9126ce5488645a54da6a8509").WaitForCompletion();
            skill.skillNameToken = "FALSESON_PRIMARY_NAME";
            skill.skillDescriptionToken = "FALSESON_PRIMARY_DESCRIPTION";


            DLC1Content.Items.FragileDamageBonusConsumed.descriptionToken = DLC1Content.Items.FragileDamageBonusConsumed.pickupToken;
            DLC1Content.Items.HealingPotionConsumed.descriptionToken = DLC1Content.Items.HealingPotionConsumed.pickupToken;


        }

        public static void BoostedNameToken(SkillDef skill, string format)
        {
            LanguageAPI.Add(skill.skillNameToken + "_B", string.Format(Language.GetString(format), Language.GetString(skill.skillNameToken)));
            skill.skillNameToken = skill.skillNameToken + "_B";
        }


        private static void PurchaseInteraction_GetContextString(ILContext il)
        {
            ILCursor c = new ILCursor(il);

            if (c.TryGotoNext(MoveType.After,
            x => x.MatchLdfld("RoR2.PurchaseInteraction", "contextToken")))
            {
                c.Emit(OpCodes.Ldarg_0);
                c.EmitDelegate<System.Func<string, PurchaseInteraction, string>>((ret, self) =>
                {
                    PurchaseTokenOverwrite overwrite = self.GetComponent<PurchaseTokenOverwrite>();
                    if (overwrite)
                    {
                        return overwrite.contextToken;
                    }
                    /*if (self.isActiveAndEnabled)
                    {
                        PurchaseTokenOverwrite overwrite = self.GetComponent<PurchaseTokenOverwrite>();
                        if (overwrite)
                        {
                            return overwrite.contextToken;
                        }
                    }*/
                    return ret;
                });
            }
            else
            {
                Debug.LogWarning("IL Failed: PurchaseInteraction_GetContextString");
            }
        }

        private static string PurchaseInteraction_GetDisplayName(On.RoR2.PurchaseInteraction.orig_GetDisplayName orig, PurchaseInteraction self)
        {
            //Check for activeandenabled due to DebugToolkit or smth
            /*if (self.isActiveAndEnabled)
            {
                PurchaseTokenOverwrite overwrite = self.GetComponent<PurchaseTokenOverwrite>();
                if (overwrite)
                {
                    return Language.GetString(overwrite.displayNameToken);
                }
            }*/
            PurchaseTokenOverwrite overwrite = self.GetComponent<PurchaseTokenOverwrite>();
            if (overwrite)
            {
                return Language.GetString(overwrite.displayNameToken);
            }
            return orig(self);
        }

        public static void EndingText()
        {
            GameEndingDef PrismEnding = LegacyResourcesAPI.Load<GameEndingDef>("GameEndingDefs/PrismaticTrialEnding");
            PrismEnding.backgroundColor = new Color(0.7f, 0.3f, 0.7f, 0.615f);
            PrismEnding.foregroundColor = new Color(0.9f, 0.6f, 0.9f, 0.833f);

            GameEndingDef MainEnding = Addressables.LoadAssetAsync<GameEndingDef>(key: "RoR2/Base/ClassicRun/MainEnding.asset").WaitForCompletion();
            GameEndingDef EscapeSequenceFailed = Addressables.LoadAssetAsync<GameEndingDef>(key: "RoR2/Base/ClassicRun/EscapeSequenceFailed.asset").WaitForCompletion();

            GameEndingDef LimboEnding = LegacyResourcesAPI.Load<GameEndingDef>("gameendingdefs/LimboEnding");
            GameEndingDef VoidEnding = Addressables.LoadAssetAsync<GameEndingDef>(key: "RoR2/DLC1/GameModes/VoidEnding.asset").WaitForCompletion();

            GameEndingDef ObliterationEnding = LegacyResourcesAPI.Load<GameEndingDef>("gameendingdefs/ObliterationEnding");
            GameEndingDef RebirthEndingDef = Addressables.LoadAssetAsync<GameEndingDef>(key: "RoR2/DLC2/ClassicRun/Endings/RebirthEndingDef.asset").WaitForCompletion();


            EscapeSequenceFailed.icon = MainEnding.icon;

            Color colorMult = new Color(0.9f, 0.9f, 1f, 1f);
            LimboEnding.backgroundColor = new Color32(227, 236, 252, 215) * colorMult;
            LimboEnding.foregroundColor = new Color32(232, 239, 255, 190) * colorMult;

            ObliterationEnding.foregroundColor = ObliterationEnding.backgroundColor * 1.1f;
            ObliterationEnding.backgroundColor = ObliterationEnding.backgroundColor.AlphaMultiplied(0.75f);

            Sprite texGameResultRebirthS = Assets.Bundle.LoadAsset<Sprite>("Assets/WQoL/General/texGameResultRebirth.png");
            RebirthEndingDef.icon = texGameResultRebirthS;

            if (WConfig.cfgTextOther.Value == true)
            {
                PrismEnding.endingTextToken = "ACHIEVEMENT_COMPLETEPRISMATICTRIAL_NAME";

                LimboEnding.endingTextToken = "GAME_RESULT_LIMBOWIN";
                VoidEnding.endingTextToken = "GAME_RESULT_VOIDWIN";
                EscapeSequenceFailed.endingTextToken = "GAME_RESULT_ESCAPEFAILED";
            }

        }

        private static void BlueTeleporterObjective(On.RoR2.TeleporterInteraction.orig_Start orig, TeleporterInteraction self)
        {
            orig(self);
            if (WConfig.cfgPrimordialBlueText.Value == false)
            {
                return;
            }
            if (self.name.StartsWith("Lunar"))
            {
                if (TPLunar1 == null)
                {
                    LunaredAllOverIt = true;
                    TPLunar1 = LanguageAPI.AddOverlay("OBJECTIVE_FIND_TELEPORTER", Language.GetString("OBJECTIVE_FIND_TELEPORTER").Replace("cDeath", "cLunarObjective"));
                    TPLunar2 = LanguageAPI.AddOverlay("OBJECTIVE_CHARGE_TELEPORTER", Language.GetString("OBJECTIVE_CHARGE_TELEPORTER").Replace("cDeath", "cLunarObjective"));
                    TPLunar3 = LanguageAPI.AddOverlay("OBJECTIVE_CHARGE_TELEPORTER_OOB", Language.GetString("OBJECTIVE_CHARGE_TELEPORTER_OOB").Replace("cDeath", "cLunarObjective"));
                    TPLunar4 = LanguageAPI.AddOverlay("OBJECTIVE_FINISH_TELEPORTER", Language.GetString("OBJECTIVE_FINISH_TELEPORTER").Replace("cDeath", "cLunarObjective"));

                }
            }
            else if (TPLunar1 != null)
            {
                TPLunar1.Remove();
                TPLunar2.Remove();
                TPLunar3.Remove();
                TPLunar4.Remove();

            }

        }


        //What is this??
        private static void IL_PICKUP(MonoMod.Cil.ILContext il)
        {
            ILCursor c = new ILCursor(il);

            if (c.TryGotoNext(MoveType.Before,
            x => x.MatchCallOrCallvirt("RoR2.GenericPickupController/PickupMessage", "Reset")))
            {
                c.Index--;
                c.RemoveRange(2);
            }
            else
            {
                Debug.LogWarning("IL Failed: SIL_PICKUP");
            }
        }

        private static void GenericPickupController_HandlePickupMessage(On.RoR2.GenericPickupController.orig_HandlePickupMessage orig, UnityEngine.Networking.NetworkMessage netMsg)
        {
            orig(netMsg);
            if (WConfig.cfgMessagesVoidQuantity.Value)
            {
                GenericPickupController.PickupMessage pickupMessage = GenericPickupController.pickupMessageInstance;
                GameObject masterGameObject = pickupMessage.masterGameObject;
                PickupDef pickupDef = PickupCatalog.GetPickupDef(pickupMessage.pickupIndex);
                //pickupMessage.Reset();
                if (!masterGameObject)
                {
                    return;
                }
                Inventory inventory = masterGameObject.GetComponent<Inventory>();
                if (!inventory)
                {
                    return;
                }
                ItemDef itemDef = ItemCatalog.GetItemDef((pickupDef != null) ? pickupDef.itemIndex : ItemIndex.None);
                if (itemDef && itemDef.hidden == false)
                {
                    int newPickupCount = (int)pickupMessage.pickupQuantity;
                    int VoidQuantity = newPickupCount;


                    ItemIndex voidIndex = ContagiousItemManager.GetTransformedItemIndex(itemDef.itemIndex);
                    //If Is Void, 
                    if (itemDef.tier == ItemTier.VoidTier1 || itemDef.tier == ItemTier.VoidTier2 || itemDef.tier == ItemTier.VoidTier3 || itemDef.tier == ItemTier.VoidBoss)
                    {
                        //If is Void, shouldn't we only bother checking the first time?
                        int voidCount = inventory.GetItemCount(itemDef);
                        if (voidCount < 2)
                        {
                            foreach (ContagiousItemManager.TransformationInfo transformationInfo in ContagiousItemManager._transformationInfos)
                            {
                                if (itemDef.itemIndex == transformationInfo.transformedItem)
                                {
                                    int original = inventory.GetItemCount(transformationInfo.originalItem);
                                    if (original > 0)
                                    {
                                        VoidQuantity += original;
                                    }
                                }
                            }
                        }
                    }
                    else if (voidIndex != ItemIndex.None)
                    {
                        //If Is Normal but you got Void
                        //If items are picked up too fast it doesn't count properly for items Voids that eat multiple
                        int voidCount = inventory.GetItemCount(voidIndex);
                        if (voidCount > 0)
                        {
                            VoidQuantity += voidCount;
                        }
                    }
                    if (VoidQuantity > newPickupCount)
                    {
                        string voidQuant = "<style=cIsVoid>(" + VoidQuantity + ")</style>";

                        string lastMessage = Chat.log[Chat.log.Count - 1] + voidQuant;
                        Chat.log.RemoveAt(Chat.log.Count - 1);
                        Chat.AddMessage(lastMessage);
                    }

                }
                Debug.Log(Chat.log[Chat.log.Count - 1]);
            }
        }



        internal static void OtherText()
        {
            //Additional Key Words
            LanguageAPI.Add("KEYWORD_SLOWING", "<style=cKeywordName>Slowing</style><style=cSub>Apply a slowing debuff reducing enemy <style=cIsUtility>movement speed</style> by <style=cIsUtility>50%</style>.</style>", "en");

            PurchaseTokenOverwrite changeTokenOnStart = Addressables.LoadAssetAsync<GameObject>(key: "RoR2/DLC1/FreeChestTerminalShippingDrone/FreeChestTerminalShippingDrone.prefab").WaitForCompletion().AddComponent<PurchaseTokenOverwrite>();
            changeTokenOnStart.displayNameToken = "FREECHEST_TERMINAL_NAME";
            changeTokenOnStart.contextToken = "FREECHEST_TERMINAL_CONTEXT";

            changeTokenOnStart = LegacyResourcesAPI.Load<GameObject>("Prefabs/networkedobjects/chest/MultiShopLargeTerminal").AddComponent<PurchaseTokenOverwrite>();
            changeTokenOnStart.displayNameToken = "MULTISHOP_LARGE_TERMINAL_NAME";
            changeTokenOnStart.contextToken = "MULTISHOP_TERMINAL_CONTEXT";
            changeTokenOnStart = LegacyResourcesAPI.Load<GameObject>("Prefabs/networkedobjects/chest/MultiShopEquipmentTerminal").AddComponent<PurchaseTokenOverwrite>();
            changeTokenOnStart.displayNameToken = "MULTISHOP_EQUIPMENT_TERMINAL_NAME";
            changeTokenOnStart.contextToken = "MULTISHOP_TERMINAL_CONTEXT";

            changeTokenOnStart = LegacyResourcesAPI.Load<GameObject>("Prefabs/networkedobjects/chest/DuplicatorLarge").AddComponent<PurchaseTokenOverwrite>();
            changeTokenOnStart.displayNameToken = "DUPLICATOR_LARGE_NAME";
            changeTokenOnStart.contextToken = "DUPLICATOR_LARGE_CONTEXT";


            Addressables.LoadAssetAsync<GameObject>(key: "RoR2/Base/shipgraveyard/VultureEggBody.prefab").WaitForCompletion().GetComponent<CharacterBody>().baseNameToken = "VultureEggBody";
            Addressables.LoadAssetAsync<GameObject>(key: "RoR2/Base/Vagrant/VagrantTrackingBomb.prefab").WaitForCompletion().GetComponent<CharacterBody>().baseNameToken = "VagrantTrackingBomb";
            Addressables.LoadAssetAsync<GameObject>(key: "RoR2/Base/Scav/ScavSackProjectile.prefab").WaitForCompletion().GetComponent<CharacterBody>().baseNameToken = "ScavSackProjectile";
            Addressables.LoadAssetAsync<GameObject>(key: "RoR2/DLC2/Scorchling/ScorchlingBombProjectile.prefab").WaitForCompletion().GetComponent<CharacterBody>().baseNameToken = "ScorchlingBombProjectile";
            Addressables.LoadAssetAsync<GameObject>(key: "RoR2/DLC2/MiniGeodeBody.prefab").WaitForCompletion().GetComponent<CharacterBody>().baseNameToken = "MiniGeodeBody";
            Addressables.LoadAssetAsync<GameObject>(key: "RoR2/Base/LunarWisp/LunarWispTrackingBomb.prefab").WaitForCompletion().GetComponent<CharacterBody>().baseNameToken = "LunarWispTrackingBomb";
            Addressables.LoadAssetAsync<GameObject>(key: "RoR2/Base/Gravekeeper/GravekeeperTrackingFireball.prefab").WaitForCompletion().GetComponent<CharacterBody>().baseNameToken = "GravekeeperTrackingFireball";
            Addressables.LoadAssetAsync<GameObject>(key: "RoR2/Base/Birdshark/BirdsharkBody.prefab").WaitForCompletion().GetComponent<CharacterBody>().baseNameToken = "BirdsharkBody";
            Addressables.LoadAssetAsync<GameObject>(key: "RoR2/DLC2/Elites/EliteBead/BeadProjectileTrackingBomb.prefab").WaitForCompletion().GetComponent<CharacterBody>().baseNameToken = "BeadProjectileTrackingBomb";
            Addressables.LoadAssetAsync<GameObject>(key: "de83659161b919844b1309bc9aaa3c71").WaitForCompletion().GetComponent<CharacterBody>().baseNameToken = "BeetleWard";
            Addressables.LoadAssetAsync<GameObject>(key: "RoR2/Base/AltarSkeleton/AltarSkeletonBody.prefab").WaitForCompletion().GetComponent<CharacterBody>().baseNameToken = "AltarSkeletonBody";

        }

        public static void UntieredItemTokens()
        {

            RoR2Content.Items.TeamSizeDamageBonus.nameToken = "ITEM_TEAMSIZEDAMAGEBONUS_NAME";
            RoR2Content.Items.TeamSizeDamageBonus.pickupToken = "ITEM_TEAMSIZEDAMAGEBONUS_PICKUP";
            RoR2Content.Items.TeamSizeDamageBonus.descriptionToken = "ITEM_TEAMSIZEDAMAGEBONUS_DESC";

            RoR2Content.Items.UseAmbientLevel.nameToken = "ITEM_USEAMBIENTLEVEL_NAME";
            RoR2Content.Items.UseAmbientLevel.pickupToken = "ITEM_USEAMBIENTLEVEL_PICKUP";
            RoR2Content.Items.UseAmbientLevel.descriptionToken = "ITEM_USEAMBIENTLEVEL_DESC";

            RoR2Content.Items.MinHealthPercentage.nameToken = "ITEM_MINHEALTHPERCENTAGE_NAME";
            RoR2Content.Items.MinHealthPercentage.pickupToken = "ITEM_MINHEALTHPERCENTAGE_PICKUP";
            RoR2Content.Items.MinHealthPercentage.descriptionToken = "ITEM_MINHEALTHPERCENTAGE_DESC";

            DLC1Content.Items.VoidmanPassiveItem.nameToken = "ITEM_VOIDMANPASSIVEITEM_NAME";
            DLC1Content.Items.VoidmanPassiveItem.pickupToken = "ITEM_VOIDMANPASSIVEITEM_PICKUP";
            DLC1Content.Items.VoidmanPassiveItem.descriptionToken = "ITEM_VOIDMANPASSIVEITEM_DESC";

            RoR2Content.Items.TeleportWhenOob.nameToken = "ITEM_TELEPORTWHENOOB_NAME";
            RoR2Content.Items.TeleportWhenOob.pickupToken = "ITEM_TELEPORTWHENOOB_PICKUP";
            RoR2Content.Items.TeleportWhenOob.descriptionToken = "ITEM_TELEPORTWHENOOB_DESC";


            JunkContent.Equipment.EliteYellowEquipment.nameToken = "EQUIPMENT_AFFIXYELLOW_NAME";
            JunkContent.Equipment.EliteYellowEquipment.pickupToken = "EQUIPMENT_AFFIXUNFINISHED_PICKUP";
            JunkContent.Equipment.EliteYellowEquipment.descriptionToken = "EQUIPMENT_AFFIXYELLOW_DESC";

        }



    }

}
